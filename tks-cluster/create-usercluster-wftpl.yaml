apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: create-tks-usercluster
  namespace: argo
spec:
  entrypoint: deploy
  arguments:
    parameters:
    - name: contract_id
      value: "0010010a-d6cb-459b-9148-1b02ac545753"
    - name: cluster_id
      value: "011b88fa-4d53-439f-9336-67845f994051"
    - name: infra_provider
      value: "aws" # aws or byoh
    - name: site_name
      value: "{{ workflow.parameters.cluster_id }}"
    - name: template_name
      value: "template-std"
    - name: git_account
      value: "tks-management"
    - name: manifest_repo_url
      value: ""
    - name: revision
      value: "main"
    - name: app_prefix
      value: "{{=sprig.substr(0, 8, workflow.parameters.cluster_id)}}"
    - name: tks_info_host
      value: "tks-info.tks.svc"

  volumes:
  - name: kubeconfig-adm
    secret:
      secretName: tks-admin-kubeconfig-secret
  - name: artifacts
    configMap:
      name: aws-artifacts
      defaultMode: 0555
  - name: tks-proto-vol
    configMap:
      name: tks-proto
  - name: awsconfig
    secret:
      secretName: awsconfig-secret
      
  templates:
  - name: deploy
    steps:
    - - name: tks-get-cluster-info
        templateRef:
          name: tks-get-cluster
          template: getTksCluster

    - - name: tks-create-cluster-repo
        templateRef:
          name: tks-create-cluster-repo
          template: main
        arguments:
          parameters:
          - name: cluster_info
            value: "{{steps.tks-get-cluster-info.outputs.parameters.cluster_info}}"

    - - name: k8s-by-capi
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters: 
          - name: list
            value: |
              [
                { 
                  "app_group": "tks-cluster",
                  "path": "cluster-api-aws",
                  "namespace": "argo",
                  "target_cluster": "tks-admin"
                }
              ]
        when: "{{workflow.parameters.infra_provider}} == aws"

    - - name: k8s-by-byoh
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                {
                  "app_group": "tks-cluster",
                  "path": "cluster-api-byoh",
                  "namespace": "argo",
                  "target_cluster": "tks-admin"
                }
              ]
        when: "{{workflow.parameters.infra_provider}} == byoh"

    - - name: wait-for-clster-to-be-registered
        template: wait-for-cluster-registration

    - - name: install-cluster-autoscaler-rbac
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                {
                  "app_group": "tks-cluster",
                  "path": "cluster-autoscaler-rbac",
                  "namespace": "argo",
                  "target_cluster": "tks-admin"
                }
              ]

    - - name: prepare-cluster-autoscaler
        template: prepare-cluster-autoscaler

    - - name: install-volumesnapshot-crds
        template: install-volumesnapshot-crds

    - - name: install-addons
        templateRef:
          name: create-application
          template: installApps
        arguments:
          parameters:
          - name: list
            value: |
              [
                { 
                  "app_group": "tks-cluster",
                  "path": "kubernetes-addons",
                  "namespace": "taco-system",
                  "target_cluster": ""
                },
                {
                  "app_group": "tks-cluster",
                  "path": "aws-ebs-csi-driver",
                  "namespace": "kube-system",
                  "target_cluster": ""
                },
                {
                  "app_group": "tks-cluster",
                  "path": "ingress-nginx",
                  "namespace": "taco-system",
                  "target_cluster": ""
                },
                {
                  "app_group": "tks-cluster",
                  "path": "metrics-server",
                  "namespace": "kube-system",
                  "target_cluster": ""
                },
                {
                  "app_group": "tks-cluster",
                  "path": "cluster-autoscaler",
                  "namespace": "kube-system",
                  "target_cluster": ""
                },
                {
                  "app_group": "tks-cluster",
                  "path": "kubed",
                  "namespace": "taco-system",
                  "target_cluster": ""
                }
              ]

    - - name: create-internal-communication
        templateRef:
          name: manage-internal-communication
          template: deploy


  #######################
  # Template Definition #
  #######################
  - name: wait-for-cluster-registration
    activeDeadlineSeconds: 1800
    container:
      image: docker.io/sktcloud/argocd-cli:v2.2.5 
      command:
      - /bin/bash
      - -exc
      - |
        yes | ./argocd login --insecure $ARGO_SERVER --username $ARGO_USERNAME --password $ARGO_PASSWORD

        while [ $(./argocd cluster list | grep \ $target\ | wc -l ) == 0 ]; do
            echo "> Wait for cluster to be registered"
            sleep 1
        done
      envFrom:
      - secretRef:
          name: "decapod-argocd-config"
      env:
      - name: target
        value: "{{workflow.parameters.cluster_id}}"

  - name: prepare-cluster-autoscaler
    container:
      name: prepare-cluster-autoscaler
      image: 'portainer/kubectl-shell:latest-v1.21.1-amd64'
      command:
        - /bin/bash
        - '-exc'
        - |
          cp /kube/value kubeconfig

          CLUSTER=$(kubectl --kubeconfig kubeconfig get cl -ojsonpath='{.items[0].metadata.name}' -n default)
          ADMIN_USER=${CLUSTER}-admin
          TOKEN=$(kubectl --kubeconfig kubeconfig get secrets -n {{workflow.parameters.cluster_id}} "$(kubectl --kubeconfig kubeconfig get sa cluster-autoscaler -n {{workflow.parameters.cluster_id}} -o=jsonpath={.secrets[0].name})" -o=jsonpath={.data.token} | base64 -d)
          kubectl --kubeconfig kubeconfig config set-credentials cluster-autoscaler --token=$TOKEN
          kubectl --kubeconfig kubeconfig config set-context cluster-autoscaler --cluster=$CLUSTER --user=cluster-autoscaler
          kubectl --kubeconfig kubeconfig config use-context cluster-autoscaler
          kubectl --kubeconfig kubeconfig config delete-context "$ADMIN_USER@$CLUSTER"
          kubectl --kubeconfig kubeconfig config delete-user "$ADMIN_USER"

          KUBECONFIG_WORKLOAD=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          echo -e "kubeconfig_workload:\n$KUBECONFIG_WORKLOAD" | head -n 5
          cat <<< "$KUBECONFIG_WORKLOAD" > kubeconfig_workload

          kubectl --kubeconfig kubeconfig_workload -n kube-system create secret generic mgmt-kubeconfig --from-file=kubeconfig
      volumeMounts:
      - name: kubeconfig-adm
        mountPath: "/kube"

  - name: install-volumesnapshot-crds
    container:
      name: install-volumesnapshot-crds
      image: 'portainer/kubectl-shell:latest-v1.21.1-amd64'
      command:
        - /bin/bash
        - '-exc'
        - |
          KUBECONFIG=$(kubectl get secret -n {{workflow.parameters.cluster_id}} {{workflow.parameters.cluster_id}}-kubeconfig -o jsonpath="{.data.value}" | base64 -d)
          echo -e "kubeconfig:\n$KUBECONFIG" | head -n 5
          cat <<< "$KUBECONFIG" > kubeconfig_temp

          kubectl --kubeconfig kubeconfig_temp apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotclasses.yaml -n kube-system
          kubectl --kubeconfig kubeconfig_temp apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshotcontents.yaml -n kube-system
          kubectl --kubeconfig kubeconfig_temp apply -f https://raw.githubusercontent.com/kubernetes-csi/external-snapshotter/master/client/config/crd/snapshot.storage.k8s.io_volumesnapshots.yaml -n kube-system
